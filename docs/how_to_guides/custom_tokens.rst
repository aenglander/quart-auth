.. _token_generation:

Customising the token
=====================

The token used to authenticate requests is generated by Quart-Auth's
AuthManager class and can be customised. The serializer class itself
is customisable and can be changed via the
``AuthManager.serializer_class`` attribute. In addition the
serialization and deserialization methods can be changed to fully
customise the token usage.

For example to switch to a timed serializer that doesn't accept tokens
older than a week old the following can be used:

.. code-block:: python
    from datetime import timedelta

    from itsdangerous import BadSignature, SignatureExpired, URLSafeTimedSerializer
    from quart import current_app
    from quart_auth import AuthManager

    ONE_WEEK = int(timedelta(days=7).total_seconds())

    class CustomAuthManager(AuthManager):
        def dump_token(self, auth_id: str, app: Optional[Quart] = None) -> str:
            if app is None:
                app = current_app

            serializer = URLSafeTimedSerializer(
                app.secret_key,
                _get_config_or_default("QUART_AUTH_SALT", app),
            )
            return serializer.dumps(auth_id)  # type: ignore

        def load_token(self, token: str, app: Optional[Quart] = None) -> Optional[str]:
            if app is None:
                app = current_app

            serializer = URLSafeTimedSerializer(
                app.secret_key,
                _get_config_or_default("QUART_AUTH_SALT", app),
            )
            try:
                return serializer.loads(token, max_age=ONE_WEEK)
            except (SignatureExpired, BadSignature):
                return None

Note that it is recommended to use the ``QUART_AUTH_DURATION``
configuration setting rather than this example.
